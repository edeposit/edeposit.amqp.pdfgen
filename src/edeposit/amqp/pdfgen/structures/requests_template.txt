#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
$warning_mark
# Imports =====================================================================
import textwrap
from collections import namedtuple
from collections import OrderedDict


# Constants ===================================================================
MAX_LINK_SIZE = 80


# Functions & classes =========================================================
class GenerateContract(namedtuple("GenerateContract", ["firma",
                                                       "pravni_forma",
                                                       "sidlo",
                                                       "ic",
                                                       "dic",
                                                       "zastoupen"])):
    """
    Request to generate contract.

    Attributes:
        firma (str): As it is defined in contract.
        pravni_forma (str): As it is defined in contract.
        sidlo (str): As it is defined in contract.
        ic (str): As it is defined in contract.
        dic (str): As it is defined in contract.
        zastoupen (str): As it is defined in contract.
    """
    pass


$warning_mark
class GenerateReview(namedtuple("GenerateReview", [$first_key,
                                                   $other_keys])):
    """
    Generate review of sent form.

    Attributes:
        $attributes
    """
    def get_rst(self):
        # this is used to maintain order of informations
        $semantic_dict

        rst = ""
        for key, description in semantic_dict.items():
            content = getattr(self, key)

            # human intepretation of python's internal values
            if isinstance(content, basestring):
                try:
                    content = content.encode("utf-8")
                except UnicodeDecodeError:
                    pass
            elif isinstance(content, bool):
                content = "Ano" if content else "Ne"
            elif content is None:
                content = "Nezvoleno"
            elif isinstance(content, list):
                tmp = []
                for item in content:
                    if "title" in item:
                        try:
                            tmp.append(item["title"].encode("utf-8"))
                        except UnicodeDecodeError:
                            tmp.append(item["title"])
                    else:
                        tmp.append(str(item))
                content = ", ".join(tmp)

            description = description.strip()
            content = str(content).strip()

            if key in ["url", "internal_url"]:
                content = self.wrap_long_links(content)
            else:
                content = self.escape_rst_sequences(content)

            rst += ":%s: %s\n" % (description, content)

        return str(rst)

    def wrap_long_links(self, s):
        if len(s) < MAX_LINK_SIZE:
            return s

        url = s.strip()
        enchanced = [
            "`%s <%s>`_" % (url_part, url)
            for url_part in textwrap.wrap(s, MAX_LINK_SIZE)
        ]

        return " ".join(enchanced)

    def escape_rst_sequences(self, s):
        out = ""
        for char in s:
            if ord(char) < 128 and char not in [" ", "\t", "\n"]:
                out += "\\"

            out += char

        return out
$warning_mark


class RST2PDF(namedtuple("RST2PDF", ["rst_content",
                                     "style",
                                     "header",
                                     "footer"])):
    """
    Generic request to convert RST file to PDF.

    Attributes:
        rst_content (str): Content of the generated PDF file.
        style (str): Style for the generated PDF file.
        header (str, default None): Header of each page.
        footer (str, default pagecount): Footer of each page.
    """
    def __new__(self, rst_content, style, header=None, footer=None):
        return super(RST2PDF, self).__new__(
            self,
            rst_content,
            style,
            header,
            footer
        )
